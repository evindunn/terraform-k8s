- hosts: localhost
  connection: local
  become: true
  become_method: sudo
  tasks:
    - name: Disable ipv6
      sysctl:
        name: "{{ item }}"
        value: "1"
        state: present
        reload: true
        sysctl_file: /etc/sysctl.d/ZZ-disable-ipv6.conf
      loop:
        - "net.ipv6.conf.all.disable_ipv6=1"
        - "net.ipv6.conf.default.disable_ipv6=1"

    - name: Upgrade all packages
      apt:
        name: "*"
        state: "latest"
        force_apt_get: true

    - name: Install docker dependencies
      package:
        state: present
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg

    - name: Install extra packages
      package:
        state: present
        name: 
          - apparmor
          - apparmor-profiles
          - apparmor-profiles-extra

    - name: Make sure apparmor service is enabled
      service:
        name: apparmor
        state: started
        enabled: true

    - name: Add apparmor to the kernel
      blockinfile:
        block: |
          if [ ! "$GRUB_CMDLINE_LINUX" = *"security=apparmor"* ]; then
              GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX security=apparmor"
          fi
        path: /etc/default/grub.d/ZZ_apparmor.cfg
        create: true
        mode: "0755"
      register: apparmor

    - name: Update grub
      shell: update-grub
      when: apparmor.changed

    - name: Add docker gpg key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release | lower }} stable"
        state: present
        filename: docker

    - name: Install docker
      package:
        state: present
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io

    - name: Make sure docker is enabled
      service:
        name: docker
        state: started
        enabled: true

    - name: Add debian user to docker group
      user:
        name: debian
        groups: docker

    - name: Add the ceph gpg key
      apt_key:
        url: https://download.ceph.com/keys/release.asc
        state: present

    - name: Add the ceph repository
      apt_repository:
        repo: "deb https://download.ceph.com/debian-{{ ceph_version }} {{ ansible_distribution_release | lower }} main"
        state: present
        filename: ceph

    - name: Install ceph packages
      package:
        state: present
        name:
          - ceph-common
          - cephadm

    - name: Write the initial ceph config
      when: ansible_hostname.startswith("ceph0")
      blockinfile:
        path: /home/debian/ceph_initial.conf
        create: yes
        owner: debian
        group: debian
        mode: "600"
        block: |
          [global]
          osd_pool_default_size = 2
          osd_pool_default_min_size = 1
          osd_pool_default_pg_autoscale_mode = on
          cluster_network = 192.168.110.0/24
          public_network = 192.168.1.0/24

          [mon]
          # Allow deleting cephfs volumes
          mon_allow_pool_delete = true

          [mgr]
          # enable the management of /etc/ceph/ceph.conf files on all hosts
          mgr_cephadm_manage_etc_ceph_ceph_conf = true

          [osd]
          osd_memory_target = {{ (ansible_memory_mb.real.total / 2) | int }}Mi

          [mds]
          mds_cache_memory_limit = {{ (ansible_memory_mb.real.total / 4) | int }}Mi

    - name: Write ceph-prepare script
      when: ansible_hostname.startswith("ceph0")
      blockinfile:
        path: /etc/systemd/system/ceph-prepare.service
        create: yes
        block: |
          [Unit]
          Description=Prepares ceph for startup/shutdown
          Requires=ceph.target
          After=ceph.target

          [Service]
          Type=oneshot
          RemainAfterExit=true
          ExecStart=sh -c 'ceph osd unset noout; ceph osd unset norebalance'
          ExecStop=sh -c 'ceph osd set noout; ceph osd set norebalance'

          [Install]
          WantedBy=multi-user.target

    - name: Enable ceph-prepare script
      when: ansible_hostname.startswith("ceph0")
      systemd:
        name: ceph-prepare
        enabled: true
        daemon_reload: true

    # - name: Write the ceph private key
    #   when: ansible_hostname.startswith("ceph0")
    #   shell: |
    #     mv /var/opt/id_ed25519 /home/debian/.ssh/ && \
    #     chown debian:debian /home/debian/.ssh/id_ed25519 && \
    #     chmod 600 /home/debian/.ssh/id_ed25519

    # - name: Write the ceph public key to authorized_keys
    #   when: not ansible_hostname.startswith("ceph0")
    #   blockinfile:
    #     path: /home/debian/.ssh/authorized_keys
    #     create: yes
    #     owner: debian
    #     group: debian
    #     mode: "644"
    #     block: "${ceph_public_key}"

    - name: Add the dns search domain to resolvconf
      lineinfile:
        path: /etc/resolvconf/resolv.conf.d/tail
        line: "{{ item }}"
      loop:
        - "search localdomain.net"
        - "options edns0 trust-ad"

    - debug: 
        msg: "Playbook finished on {{ ansible_date_time.date }} at {{ ansible_date_time.time }} {{ ansible_date_time.tz }}"

  vars:
    ceph_version: pacific
